output$density_plot <- renderPlotly({ ggplotly(plot_density_reactive()) })
output$scatter_plot <- renderPlotly({ ggplotly(plot_scatter_reactive()) })
output$bar_plot     <- renderPlotly({ ggplotly(plot_bar_reactive()) })
output$qq_plot      <- renderPlot({ plot_qq_reactive() })
output$assumption_plots <- renderPlot({
req(values$regression_model); par(mfrow = c(2, 2)); plot(values$regression_model)
})
output$download_plot_hist <- downloadHandler(
filename = function() { paste0("histogram_", input$var_eksplorasi, ".png") },
content = function(file) { ggsave(file, plot = plot_hist_reactive(), device = "png") }
)
output$download_plot_box <- downloadHandler(
filename = function() { paste0("boxplot_", input$var_eksplorasi, ".png") },
content = function(file) { ggsave(file, plot = plot_box_reactive(), device = "png") }
)
output$download_plot_density <- downloadHandler(
filename = function() { paste0("density_", input$var_eksplorasi, ".png") },
content = function(file) { ggsave(file, plot = plot_density_reactive(), device = "png") }
)
output$download_plot_scatter <- downloadHandler(
filename = function() { paste0("scatter_", input$var_eksplorasi, ".png") },
content = function(file) { ggsave(file, plot = plot_scatter_reactive(), device = "png") }
)
output$download_plot_bar <- downloadHandler(
filename = function() { paste0("barplot_", input$var_eksplorasi, ".png") },
content = function(file) { ggsave(file, plot = plot_bar_reactive(), device = "png") }
)
output$download_plot_qq <- downloadHandler(
filename = function() { paste0("qqplot_", input$var_normalitas, ".png") },
content = function(file) { ggsave(file, plot = plot_qq_reactive(), device = "png") }
)
output$download_plot_anova <- downloadHandler(
filename = function() { paste0("anova_plot_", input$var_anova_dep, ".png") },
content = function(file) { ggsave(file, plot = plot_anova_reactive(), device = "png") }
)
output$download_plot_reg_asumsi <- downloadHandler(
filename = "plot_asumsi_regresi.png",
content = function(file) {
png(file, width = 800, height = 800, res = 100)
par(mfrow = c(2, 2)); plot(values$regression_model); dev.off()
}
)
# REGRESI LINEAR BERGANDA - FIXED
observeEvent(input$run_regression, {
req(input$var_dependent, input$var_independent)
if(input$var_dependent == "" || length(input$var_independent) == 0) {
showNotification("Pilih variabel dependen dan minimal satu variabel independen!", type = "error")
return()
}
output$regression_summary <- renderPrint({
# Prepare data
dep_var <- values$processed_data[[input$var_dependent]]
indep_vars <- values$processed_data[input$var_independent]
# Create regression data frame
reg_data <- data.frame(
dependent = dep_var,
indep_vars
)
# Remove missing values
reg_data <- reg_data[complete.cases(reg_data), ]
if(nrow(reg_data) > length(input$var_independent) + 1) {
# Create formula
formula_str <- paste("dependent ~", paste(input$var_independent, collapse = " + "))
# Fit regression model
reg_model <- lm(as.formula(formula_str), data = reg_data)
values$regression_model <- reg_model
cat("REGRESI LINEAR BERGANDA\n")
cat("=======================\n")
cat("Variabel Dependen:", input$var_dependent, "\n")
cat("Variabel Independen:", paste(input$var_independent, collapse = ", "), "\n")
cat("Jumlah observasi:", nrow(reg_data), "\n\n")
# Print summary
print(summary(reg_model))
} else {
cat("Error: Tidak cukup data untuk analisis regresi!")
}
})
output$regression_interpretation <- renderUI({
req(values$regression_model)
model <- values$regression_model
summary_model <- summary(model)
# 1. Uji F (Signifikansi Model)
f_stat <- summary_model$fstatistic
f_p_value <- pf(f_stat[1], f_stat[2], f_stat[3], lower.tail = FALSE)
model_sig_text <- if(f_p_value < 0.05) {
tagList("Model ini ", tags$b("signifikan secara statistik"), " (p-value < 0.05), yang berarti setidaknya satu variabel independen memiliki hubungan dengan variabel dependen.")
} else {
tagList("Model ini ", tags$b("tidak signifikan secara statistik"), " (p-value >= 0.05), yang berarti secara keseluruhan model ini tidak dapat menjelaskan variasi variabel dependen dengan baik.")
}
# 2. R-squared (Kebaikan Model)
r_sq_text <- tagList("Nilai ", tags$b("Adjusted R-squared"), " adalah ", tags$b(round(summary_model$adj.r.squared, 4)), ". Ini berarti sekitar ", tags$b(paste0(round(summary_model$adj.r.squared * 100, 2), "%")), " variasi pada variabel dependen dapat dijelaskan oleh variabel-variabel independen dalam model.")
# 3. Koefisien
coeffs <- summary_model$coefficients
coeff_list <- lapply(1:nrow(coeffs), function(i) {
var_name <- rownames(coeffs)[i]
estimate <- round(coeffs[i, 1], 4)
p_val <- coeffs[i, 4]
significance <- if(p_val < 0.05) tags$b("signifikan") else "tidak signifikan"
if(var_name == "(Intercept)") {
tags$li(tags$b("Intercept:"), " Nilai estimasi adalah ", tags$b(estimate), ". Ini adalah nilai prediksi variabel dependen ketika semua variabel independen bernilai nol.")
} else {
direction <- if(estimate > 0) "meningkatkan" else "menurunkan"
tags$li(tags$b(var_name), ": Variabel ini ", significance, " (p-value = ", round(p_val, 4), "). Setiap kenaikan 1 unit pada ", var_name, " akan ", tags$b(direction), " nilai variabel dependen sebesar ", tags$b(abs(estimate)), " unit, dengan asumsi variabel lain konstan.")
}
})
tagList(
h4("1. Signifikansi Model (Uji-F)"),
p(model_sig_text),
h4("2. Kebaikan Model (Goodness of Fit)"),
p(r_sq_text),
h4("3. Interpretasi Koefisien"),
tags$ul(coeff_list)
)
})
})
# --- Logika untuk Peta Sebaran ---
# 1. Buat data reaktif yang menggabungkan data peta dan data sovi
data_peta_reaktif <- reactive({
req(input$var_map)
# Filter data peta terlebih dahulu jika sebuah provinsi dipilih
peta_terfilter <- if (!is.null(input$pilih_provinsi) && input$pilih_provinsi != "Seluruh Indonesia") {
peta_provinsi %>% filter(nmprov == input$pilih_provinsi)
} else {
peta_provinsi
}
# Lakukan join dengan data yang sudah difilter
left_join(
peta_terfilter,
values$processed_data,
by = c("kodeprkab" = "DISTRICTCODE")
)
})
# 2. Render peta leaflet
output$peta_sebaran <- renderLeaflet({
data_peta <- data_peta_reaktif()
req(input$var_map, input$var_map %in% names(data_peta))
if (!is.numeric(data_peta[[input$var_map]])) return(NULL)
pal <- colorNumeric(
palette = "YlOrRd",
domain = data_peta[[input$var_map]],
na.color = "#bdbdbd"
)
labels <- sprintf(
"<strong>%s</strong><br/>%s: %s",
data_peta$nmkab,
input$var_map,
format(data_peta[[input$var_map]], big.mark = ",", decimal.mark = ".", nsmall = 2)
) %>% lapply(htmltools::HTML)
# Membuat peta
leaflet(data = data_peta, options = leafletOptions(preferCanvas = TRUE)) %>% # Prefer canvas untuk performa lebih baik
addProviderTiles(providers$CartoDB.Positron) %>%
setView(lng = 118, lat = -2, zoom = 5) %>%
addPolygons(
fillColor = ~pal(get(input$var_map)),
weight = 1.5,                      # <-- UBAH: Garis batas sedikit lebih tebal
opacity = 1,
color = "black",                   # <-- UBAH: Warna garis batas menjadi hitam
dashArray = "1",
fillOpacity = 0.7,
highlightOptions = highlightOptions( # <-- MODIFIKASI EFEK HOVER
weight = 3,                      # Garis batas saat di-hover
color = "#FFFFFF",               # Warna garis batas saat di-hover (putih)
dashArray = "",
fillOpacity = 0.9,               # Opacity saat di-hover
bringToFront = TRUE              # Bawa ke depan saat di-hover
),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
) %>%
addLegend(
pal = pal,
values = ~get(input$var_map),
opacity = 0.7,
title = input$var_map,
position = "bottomright"
)
})
# UJI ASUMSI REGRESI - [FIXED with INTERPRETATION]
observeEvent(input$uji_asumsi_reg, {
req(values$regression_model)
model <- values$regression_model
residuals <- residuals(model)
# Lakukan semua tes dan kumpulkan hasilnya
# 1. Normalitas
shapiro_res <- if(length(residuals) <= 5000) shapiro.test(residuals) else NULL
# 2. Homoskedastisitas (Breusch-Pagan)
bp_res <- tryCatch({
lmtest::bptest(model)
}, error = function(e) { NULL })
# 3. Autokorelasi (Durbin-Watson)
dw_res <- tryCatch({
lmtest::dwtest(model)
}, error = function(e) { NULL })
# 4. Multikolinearitas (VIF)
vif_res <- if(length(coef(model)) > 2) {
tryCatch({
car::vif(model)
}, error = function(e) { NULL })
} else { NULL }
# Simpan semua hasil ke reactiveVal
reg_assumption_results(list(
shapiro = shapiro_res,
bptest = bp_res,
dwtest = dw_res,
vif = vif_res
))
output$assumption_plots <- renderPlot({
par(mfrow = c(2, 2), mar = c(4, 4, 2, 1))
plot(model)
})
output$assumption_tests <- renderPrint({
req(reg_assumption_results())
res <- reg_assumption_results()
cat("1. UJI NORMALITAS RESIDUAL (Shapiro-Wilk)\n")
if(!is.null(res$shapiro)) print(res$shapiro) else cat("Jumlah observasi > 5000, uji Shapiro-Wilk dilewati.\n")
cat("\n2. UJI HOMOSKEDASTISITAS (Breusch-Pagan)\n")
if(!is.null(res$bptest)) print(res$bptest) else cat("Uji gagal dijalankan.\n")
cat("\n3. UJI AUTOKORELASI (Durbin-Watson)\n")
if(!is.null(res$dwtest)) print(res$dwtest) else cat("Uji gagal dijalankan.\n")
cat("\n4. UJI MULTIKOLINEARITAS (VIF)\n")
if(!is.null(res$vif)) print(res$vif) else cat("Tidak ada atau hanya ada satu variabel independen.\n")
})
})
# Interpretasi dinamis untuk Uji Asumsi Regresi
output$interpretation_assumption_tests <- renderUI({
req(reg_assumption_results())
res <- reg_assumption_results()
alpha <- 0.05
# 1. Interpretasi Normalitas
interp_norm <- if(!is.null(res$shapiro)) {
p_val <- res$shapiro$p.value
kesimpulan <- if(p_val > alpha) tagList("berdistribusi ", tags$b("NORMAL"), ". Asumsi terpenuhi.") else tagList("berdistribusi ", tags$b("TIDAK NORMAL"), ". Asumsi terlanggar.")
tags$li("Normalitas Residual:", " P-value dari uji Shapiro-Wilk adalah ", tags$b(round(p_val, 4)), ". Ini berarti residual ", kesimpulan)
}
# 2. Interpretasi Homoskedastisitas
interp_homosked <- if(!is.null(res$bptest)) {
p_val <- res$bptest$p.value
kesimpulan <- if(p_val > alpha) tagList("bersifat ", tags$b("HOMOSKEDASTIS"), " (varians konstan). Asumsi terpenuhi.") else tagList("bersifat ", tags$b("HETEROSKEDASTIS"), " (varians tidak konstan). Asumsi terlanggar.")
tags$li("Homoskedastisitas:", " P-value dari uji Breusch-Pagan adalah ", tags$b(round(p_val, 4)), ". Ini berarti residual ", kesimpulan)
}
# 3. Interpretasi Autokorelasi
interp_auto <- if(!is.null(res$dwtest)) {
p_val <- res$dwtest$p.value
dw_stat <- res$dwtest$statistic
kesimpulan <- if(p_val < alpha) tags$b("TERDAPAT AUTOKORELASI") else tags$b("TIDAK TERDAPAT AUTOKORELASI")
tags$li("Independensi Residual:", " Statistik Durbin-Watson adalah ", tags$b(round(dw_stat, 3)), ". Hasil uji menunjukkan bahwa ", kesimpulan, " dalam residual (p-value = ", round(p_val, 4), ").")
}
# 4. Interpretasi Multikolinearitas
interp_vif <- if(!is.null(res$vif)) {
vif_values <- res$vif
# Periksa jika ada VIF yang lebih dari 10 (atau 5)
is_high_vif <- any(vif_values > 10)
kesimpulan <- if(is_high_vif) {
high_vif_vars <- names(vif_values[vif_values > 10])
tagList(tags$b("TERDAPAT MASALAH MULTIKOLINEARITAS"), " serius karena ada nilai VIF > 10 pada variabel: ", tags$b(paste(high_vif_vars, collapse = ", ")), ".")
} else {
tagList(tags$b("TIDAK ADA MASALAH MULTIKOLINEARITAS"), " yang serius (semua nilai VIF < 10).")
}
tags$li("Multikolinearitas:", " ", kesimpulan)
}
tagList(
tags$ul(
interp_norm,
interp_homosked,
interp_auto,
interp_vif
)
)
})
# Di anova_plot ada reactive. jadi kita buatkan juga
plot_anova_reactive <- reactive({
req(input$var_anova_dep, input$var_anova_indep)
ggplot(values$processed_data, aes_string(x = input$var_anova_indep, y = input$var_anova_dep, fill = input$var_anova_indep)) +
geom_boxplot() +
theme_minimal() +
labs(title = paste("Perbandingan", input$var_anova_dep, "berdasarkan", input$var_anova_indep))
})
output$anova_plot <- renderPlot({
plot_anova_reactive()
})
# --- LOGIKA UNDUH LAPORAN REGRESI --- #
output$unduh_laporan_regresi <- downloadHandler(
filename = function() { paste0("Laporan-Regresi-", input$var_dependent, "-", Sys.Date(), ".pdf") },
content = function(file) {
req(values$regression_model, message = "Jalankan model regresi terlebih dahulu.")
showNotification("Menyiapkan laporan Regresi lengkap...", type = "message")
temp_report <- file.path(tempdir(), "laporan_regresi.Rmd")
file.copy(here("Sintaks","laporan_regresi.Rmd"), temp_report, overwrite = TRUE)
model <- values$regression_model
asumsi_res <- reg_assumption_results()
# Ambil interpretasi dari UI (versi teks)
interp_reg_text <- as.character(renderUI({ regression_interpretation() })())
interp_asumsi_text <- as.character(renderUI({ interpretation_assumption_tests() })())
params_list <- list(
dep_var = input$var_dependent,
indep_vars = input$var_independent,
hasil_regresi = if(!is.null(model)) paste(capture.output(summary(model)), collapse="\n") else NULL,
interpretasi_regresi = if(!is.null(model)) interp_reg_text else NULL,
hasil_asumsi_reg = if(!is.null(asumsi_res)) paste(capture.output(asumsi_res), collapse="\n") else NULL,
interpretasi_asumsi_reg = if(!is.null(asumsi_res)) interp_asumsi_text else NULL,
plot_asumsi_reg = model
)
rmarkdown::render(temp_report, output_file = file, params = params_list, envir = new.env(parent = globalenv()))
}
)
# --- LOGIKA UNDUH LAPORAN ANOVA --- #
output$unduh_laporan_anova <- downloadHandler(
filename = function() { paste0("Laporan-ANOVA-", Sys.Date(), ".pdf") },
content = function(file) {
showNotification("Menyiapkan laporan ANOVA...", type = "message")
temp_report <- file.path(tempdir(), "laporan_anova.Rmd")
file.copy(here("Sintaks","laporan_anova.Rmd"), temp_report, overwrite = TRUE)
interp_anova_one_text <- as.character(renderUI({ anova_one_interp() })())
interp_anova_two_text <- as.character(renderUI({ anova_two_interp() })())
params_list <- list(
hasil_anova_one = if(!is.null(anova_one_result_val())) paste(capture.output(anova_one_result_val()), collapse="\n") else NULL,
interp_anova_one = if(!is.null(anova_one_result_val())) interp_anova_one_text else NULL,
plot_anova = if(!is.null(anova_one_result_val())) plot_anova_reactive() else NULL,
hasil_anova_two = if(!is.null(anova_two_result_val())) paste(capture.output(anova_two_result_val()), collapse="\n") else NULL,
interp_anova_two = if(!is.null(anova_two_result_val())) interp_anova_two_text else NULL
)
rmarkdown::render(temp_report, output_file = file, params = params_list, envir = new.env(parent = globalenv()))
}
)
# --- LOGIKA UNDUH LAPORAN UJI PROPORSI & VARIANS --- #
output$unduh_laporan_uji_prop_var <- downloadHandler(
filename = function() { paste0("Laporan-Uji-Prop-Var-", Sys.Date(), ".pdf") },
content = function(file) {
showNotification("Menyiapkan laporan Uji Proporsi & Varians...", type = "message")
temp_report <- file.path(tempdir(), "laporan_uji_prop_var.Rmd")
file.copy(here("Sintaks","laporan_uji_prop_var.Rmd"), temp_report, overwrite = TRUE)
prop_res <- prop_test_result_val()
var_res <- var_test_result_val()
interp_prop_text <- NULL
if(!is.null(prop_res)){
interp_prop_text <- as.character(renderUI({ prop_test_interp() })())
}
interp_var_text <- NULL
if(!is.null(var_res)){
interp_var_text <- as.character(renderUI({ var_test_interp() })())
}
params_list <- list(
hasil_prop = if(!is.null(prop_res)) paste(capture.output(prop_res), collapse = "\n") else NULL,
interp_prop = interp_prop_text,
hasil_var = if(!is.null(var_res)) paste(capture.output(var_res), collapse = "\n") else NULL,
interp_var = interp_var_text
)
rmarkdown::render(temp_report, output_file = file, params = params_list, envir = new.env(parent = globalenv()))
}
)
# --- LOGIKA UNDUH LAPORAN UJI RATA-RATA --- #
output$unduh_laporan_uji_rata <- downloadHandler(
filename = function() { paste0("Laporan-Uji-Rata-", Sys.Date(), ".pdf") },
content = function(file) {
showNotification("Menyiapkan laporan Uji Rata-rata...", type = "message")
temp_report <- file.path(tempdir(), "laporan_uji_rata.Rmd")
file.copy(here("Sintaks","laporan_uji_rata.Rmd"), temp_report, overwrite = TRUE)
# Ambil hasil dari reactiveVal
one_sample_res <- one_sample_t_result()
two_sample_res <- two_sample_t_result()
# Siapkan interpretasi (versi teks)
interp_one_sample_text <- NULL
if(!is.null(one_sample_res)){
p_val <- one_sample_res$p.value
kesimpulan <- if(p_val < 0.05) "berbeda secara signifikan" else "tidak berbeda secara signifikan"
interp_one_sample_text <- paste0("Dengan p-value ", round(p_val, 4), ", rata-rata populasi disimpulkan ", kesimpulan, " dari ", one_sample_res$null.value, ".")
}
interp_two_sample_text <- NULL
if(!is.null(two_sample_res)){
p_val <- two_sample_res$p.value
kesimpulan <- if(p_val < 0.05) "terdapat perbedaan rata-rata yang signifikan" else "tidak terdapat perbedaan rata-rata yang signifikan"
interp_two_sample_text <- paste0("Dengan p-value ", round(p_val, 4), ", disimpulkan ", kesimpulan, " antara kedua kelompok.")
}
params_list <- list(
hasil_one_sample = if(!is.null(one_sample_res)) paste(capture.output(one_sample_res), collapse="\n") else NULL,
interp_one_sample = interp_one_sample_text,
hasil_two_sample = if(!is.null(two_sample_res)) paste(capture.output(two_sample_res), collapse="\n") else NULL,
interp_two_sample = interp_two_sample_text
)
rmarkdown::render(temp_report, output_file = file, params = params_list, envir = new.env(parent = globalenv()))
}
)
# --- LOGIKA UNDUH LAPORAN UJI ASUMSI --- #
output$unduh_laporan_asumsi <- downloadHandler(
filename = function() { paste0("Laporan-Asumsi-", Sys.Date(), ".pdf") },
content = function(file) {
showNotification("Menyiapkan laporan Uji Asumsi...", type = "message")
temp_report <- file.path(tempdir(), "laporan_asumsi.Rmd")
file.copy(here("Sintaks","laporan_asumsi.Rmd"), temp_report, overwrite = TRUE)
# Ambil hasil dari reactiveVal
norm_res <- norm_test_results()
homog_res <- homog_test_results()
# Siapkan interpretasi (versi teks)
interp_norm_text <- NULL
if(!is.null(norm_res)) {
p_val_shapiro <- norm_res$shapiro$p.value
kesimpulan <- if (p_val_shapiro > 0.05) "data terdistribusi NORMAL." else "data terdistribusi TIDAK NORMAL."
interp_norm_text <- paste("Berdasarkan uji Shapiro-Wilk (p-value =", round(p_val_shapiro, 4), "), disimpulkan", kesimpulan)
}
interp_homog_text <- NULL
if(!is.null(homog_res)) {
p_val_bartlett <- homog_res$bartlett$p.value
kesimpulan <- if (p_val_bartlett > 0.05) "varians antar kelompok bersifat HOMOGEN." else "varians antar kelompok bersifat HETEROGEN."
interp_homog_text <- paste("Berdasarkan uji Bartlett (p-value =", round(p_val_bartlett, 4), "), disimpulkan", kesimpulan)
}
params_list <- list(
var_normalitas = input$var_normalitas,
hasil_normalitas = if(!is.null(norm_res)) paste(capture.output(norm_res), collapse = "\n") else NULL,
interpretasi_normalitas = interp_norm_text,
plot_qq = if(!is.null(norm_res)) plot_qq_reactive() else NULL,
var_homogenitas = input$var_homogenitas,
grup_homogenitas = input$group_var,
hasil_homogenitas = if(!is.null(homog_res)) paste(capture.output(homog_res), collapse = "\n") else NULL,
interpretasi_homogenitas = interp_homog_text
)
rmarkdown::render(temp_report, output_file = file, params = params_list, envir = new.env(parent = globalenv()))
}
)
# --- LOGIKA UNDUH LAPORAN EKSPLORASI DATA (SUDAH DIPERBAIKI) --- #
output$unduh_laporan_eksplorasi <- downloadHandler(
filename = function() {
paste0("Laporan-Eksplorasi-", input$var_eksplorasi, "-", Sys.Date(), ".pdf")
},
content = function(file) {
# PERBAIKAN #1: Tambahkan req() untuk memastikan variabel sudah dipilih
# Ini akan mencegah error jika tombol diklik sebelum variabel ada.
req(input$var_eksplorasi, message = "Silakan pilih variabel terlebih dahulu.")
showNotification("Menyiapkan laporan, mohon tunggu...", duration = 10, type = "message")
temp_report <- file.path(tempdir(), "laporan_eksplorasi.Rmd")
file.copy(here("Sintaks","laporan_eksplorasi.Rmd"), temp_report, overwrite = TRUE)
# --- Menyiapkan Semua Parameter ---
var_data_report <- values$processed_data[[input$var_eksplorasi]]
# 1. Tabel Statistik Deskriptif (Logika yang lebih aman)
tabel_stats <- NULL
if(is.numeric(var_data_report)) {
desc <- summary(var_data_report)
tabel_stats <- as.data.frame(t(as.matrix(desc)))
} else {
tabel_stats <- as.data.frame(table(var_data_report))
colnames(tabel_stats) <- c("Kategori", "Frekuensi")
}
# PERBAIKAN #2: Tulis ulang logika interpretasi di sini (lebih stabil)
interp_hist_text <- NULL
interp_box_text <- NULL
if (is.numeric(var_data_report)) {
# Logika untuk interpretasi histogram
clean_data <- na.omit(var_data_report)
mean_val <- mean(clean_data)
median_val <- median(clean_data)
sd_val <- sd(clean_data)
skewness <- if(sd_val > 0) { 3 * (mean_val - median_val) / sd_val } else { 0 }
if (abs(skewness) < 0.5) {
interp_hist_text <- "Distribusi terlihat hampir simetris."
} else if (skewness > 0.5) {
interp_hist_text <- "Distribusi menjulur ke kanan (positive skew)."
} else {
interp_hist_text <- "Distribusi menjulur ke kiri (negative skew)."
}
# Logika untuk interpretasi boxplot
q1 <- quantile(clean_data, 0.25)
q3 <- quantile(clean_data, 0.75)
interp_box_text <- paste0("Median data berada di ", round(median_val, 2),
". 50% data berada di antara ", round(q1, 2), " dan ", round(q3, 2), ".")
}
# --- Membuat List Parameter ---
params_list <- list(
var_pilihan = input$var_eksplorasi,
data_tabel = tabel_stats,
plot_hist = if ('histogram' %in% input$plot_types && is.numeric(var_data_report)) plot_hist_reactive() else NULL,
interpretasi_hist = interp_hist_text,
plot_box = if ('boxplot' %in% input$plot_types && is.numeric(var_data_report)) plot_box_reactive() else NULL,
interpretasi_box = interp_box_text,
plot_density = if ('density' %in% input$plot_types && is.numeric(var_data_report)) plot_density_reactive() else NULL,
interpretasi_density = "Plot kepadatan menunjukkan estimasi distribusi probabilitas dari variabel.",
plot_scatter = if ('scatter' %in% input$plot_types && is.numeric(var_data_report)) plot_scatter_reactive() else NULL,
interpretasi_scatter = "Scatter plot memvisualisasikan setiap nilai data terhadap indeksnya.",
plot_bar = if ('bar' %in% input$plot_types && !is.numeric(var_data_report)) plot_bar_reactive() else NULL,
interpretasi_bar = "Bar plot menunjukkan frekuensi untuk setiap kategori."
)
rmarkdown::render(temp_report, output_file = file, params = params_list, envir = new.env(parent = globalenv()))
}
)
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('Sintaks/25 bismillah.R')
runApp('Sintaks/25 bismillah.R')
runApp('Sintaks/25 bismillah.R')
library(shiny); runApp('25 bismillah.R')
runApp('25 bismillah.R')
runApp('Sintaks/23 bismillah.R')
hb
runApp('25 bismillah.R')
shiny::runApp()
library(shiny); runApp('App2.R')
runApp('App2.R')
library(shiny); runApp('App2.R')
runApp('App2.R')
runApp('App2.R')
runApp('App2.R')
runApp('App2.R')
runApp()
shiny::runApp()
runApp()
install.packages("pagedown")
runApp()
rsconnect::setAccountInfo(name='muhammad-ludvi',
token='CED40DD47531E06E9E5648D2FC6C7C43',
secret='<SECRET>')
